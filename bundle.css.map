{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../Augmentations.svelte",
    "../OtddApplied.svelte",
    "../Labels.svelte",
    "../OptimalTransport.svelte",
    "../ImageGrid.svelte",
    "../Plot.svelte",
    "../CouplingPlot.svelte",
    "../CouplingHeatmap.svelte",
    "../TransformMenu.svelte",
    "../CoordinatesPlot.svelte",
    "../TransformMenu.svelte",
    "../CouplingPlot.svelte",
    "../BindingsPlot.svelte",
    "../CoordinatesPlot.svelte",
    "../BarChart.svelte",
    "../DistanceMatrix.svelte",
    "../LabelDistanceMatrix.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { selectedTransform } from './Augmentations/stores.js';\n  import TransformMenu from './Augmentations/TransformMenu.svelte';\n  import ImageGrid from './Augmentations/ImageGrid.svelte';\n  import Plot from './Augmentations/Plot.svelte';\n\n  let dataDir=\"data/VIZ4/images\";\n  let baseSet = \"USPS\";\n  let augmentedSet = \"MNIST\";\n</script>\n\n<style>\n  .title {\n    font-size: 1.6em;\n    margin: 30px;\n  }\n  .grid-container {\n    display: grid;\n    grid-template-columns: 280px 280px 280px 280px;\n    grid-gap: 10px;\n    justify-content: center;\n  }\n\n  @media (max-width: 1200px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 / 1 / 2 / 2; }\n    .item2 { grid-area: 2 / 1 / 3 / 2; }\n    .item3 { grid-area: 1 / 2 / 2 / 3; }\n    .item4 { grid-area: 2 / 2 / 3 / 3; }\n  }\n\n  @media (max-width: 600px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 ; }\n    .item2 { grid-area: 3 ; }\n    .item3 { grid-area: 2 ; }\n    .item4 { grid-area: 4 ; }\n  }\n</style>\n\n<div class=\"grid-container\" id=\"augmentations\">\n  <div class=\"item1\"><TransformMenu /></div>\n  <div class=\"item2\">\n    {#if $selectedTransform}\n      <ImageGrid\n        imageSrc=\"{ dataDir + '/' + augmentedSet + '_' + $selectedTransform.id + '.png'}\"\n        title=\"{augmentedSet} + {$selectedTransform.Transform}\"/>\n    {/if}\n  </div>\n  <div class=\"item3\"><Plot /></div>\n  <div class=\"item4\">\n    <ImageGrid imageSrc=\"{ dataDir + '/' + baseSet + '.png' }\" title=\"{baseSet}\"/>\n  </div>\n\n</div>\n",
    "<script>\n  import {  } from './OttdApplied/stores.js';\n  import TransformMenu from './OttdApplied/TransformMenu.svelte';\n  import LabelDistanceMatrix from './OttdApplied/LabelDistanceMatrix.svelte';\n  import CouplingPlot from './OttdApplied/CouplingPlot.svelte';\n  import CouplingHeatmap from './OttdApplied/CouplingHeatmap.svelte';\n</script>\n\n<style>\n  .title {\n    font-size: 1.6em;\n    margin: 30px;\n  }\n  .grid-container {\n    display: grid;\n    grid-template-columns: 280px 280px 280px 280px;\n    grid-gap: 10px;\n    justify-content: center;\n  }\n\n  @media (max-width: 1200px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 / 1 / 2 / 2; }\n    .item2 { grid-area: 1 / 2 / 2 / 3; }\n    .item3 { grid-area: 2 / 1 / 3 / 2; }\n    .item4 { grid-area: 2 / 2 / 3 / 3; }\n  }\n\n  @media (max-width: 600px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 ; }\n    .item2 { grid-area: 2 ; }\n    .item3 { grid-area: 3 ; }\n    .item4 { grid-area: 4 ; }\n  }\n\n</style>\n\n<div class=\"grid-container\" id=\"otdd\">\n  <div class=\"item1\"><TransformMenu /></div>\n  <div class=\"item2\"><LabelDistanceMatrix /></div>\n  <div class=\"item3\"><CouplingPlot /></div>\n  <div class=\"item4\"><CouplingHeatmap /></div>\n\n</div>\n",
    "<script>\n  import { dataSet1, dataSet2, rotation1, rotation2, mixing1, mixing2 } from './Labels/stores.js';\n  import CoordinatesPlot from './Labels/CoordinatesPlot.svelte';\n  import CouplingPlot from './Labels/CouplingPlot.svelte';\n  import BarChart from './Labels/BarChart.svelte';\n</script>\n\n<style>\n  .title {\n    font-size: 1.6em;\n    margin: 30px;\n  }\n  .grid-container {\n    display: grid;\n    grid-template-columns: 280px 280px 280px 280px;\n    grid-gap: 10px;\n    justify-content: center;\n  }\n\n  @media (max-width: 1200px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 / 1 / 2 / 2; }\n    .item2 { grid-area: 1 / 2 / 2 / 3; }\n    .item3 { grid-area: 2 / 1 / 3 / 2; }\n    .item4 { grid-area: 2 / 2 / 3 / 3; }\n  }\n\n  @media (max-width: 600px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 ; }\n    .item2 { grid-area: 2 ; }\n    .item3 { grid-area: 3 ; }\n    .item4 { grid-area: 4 ; }\n  }\n\n</style>\n\n<div class=\"grid-container\" id=\"labels\">\n  <div class=\"item1\">\n    <CoordinatesPlot\n      set=\"{$dataSet1}\"\n      bind:rotation=\"{$rotation1}\"\n      bind:mixing=\"{$mixing1}\"\n      label=\"Dataset 1\" />\n  </div>\n  <div class=\"item2\">\n    <CoordinatesPlot\n      set=\"{$dataSet2}\"\n      bind:rotation=\"{$rotation2}\"\n      bind:mixing=\"{$mixing2}\"\n      label=\"Dataset 2\" />\n  </div>\n  <div class=\"item3\">\n    <CouplingPlot />\n  </div>\n  <div class=\"item4\">\n    <BarChart />\n  </div>\n</div>\n",
    "<script>\n  import DistanceMatrix from './OptimalTransport/DistanceMatrix.svelte';\n  import CoordinatesPlot from './OptimalTransport/CoordinatesPlot.svelte';\n  import BindingsPlot from './OptimalTransport/BindingsPlot.svelte';\n  import { selectedSet1, selectedSet2 } from './OptimalTransport/stores.js';\n</script>\n\n<style>\n\n  .title {\n    font-size: 1.6em;\n    margin: 30px;\n  }\n  .grid-container {\n    display: grid;\n    grid-template-columns: 280px 280px 280px 280px;\n    grid-gap: 10px;\n    justify-content: center;\n  }\n\n  @media (max-width: 1200px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 / 1 / 2 / 2; }\n    .item2 { grid-area: 2 / 1 / 3 / 2; }\n    .item3 { grid-area: 2 / 2 / 3 / 3; }\n    .item4 { grid-area: 1 / 2 / 2 / 3; }\n  }\n\n  @media (max-width: 600px) {\n    .grid-container {\n      display: grid;\n      grid-template-columns: 280px;\n      grid-gap: 10px;\n      justify-content: center;\n    }\n    .item1 { grid-area: 1 ; }\n    .item2 { grid-area: 3 ; }\n    .item3 { grid-area: 4 ; }\n    .item4 { grid-area: 2 ; }\n  }\n\n</style>\n\n<div class=\"grid-container\" id=\"ot\">\n  <div class=\"item1\"><DistanceMatrix /></div>\n  <div class=\"item2\"><CoordinatesPlot set=\"{$selectedSet1}\" /></div>\n  <div class=\"item3\"><CoordinatesPlot set=\"{$selectedSet2}\" /></div>\n  <div class=\"item4\"><BindingsPlot /></div>\n</div>\n",
    "<script>\n\n  export let imageSrc;\n  export let title;\n  let nrRows = 10;\n  let nrCols = 10;\n\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n    display: inline-block;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n      <div class=\"panel-label\">{ title }</div>\n  </div>\n  <div class=\"grid\">\n      <img src=\"{ imageSrc }\" alt=''/>\n  </div>\n</div>\n",
    "<script>\n  import { tweened } from 'svelte/motion'\n  import { sineInOut } from 'svelte/easing'\n  import * as d3scale from 'd3-scale'\n  import {\n    transformations,\n    selectedTransform,\n    errorDropRange,\n    otddRange,\n    regressionLine,\n    lowerConfidenceLine,\n    upperConfidenceLine,\n  } from './stores.js'\n\n  const plotSize = { width: 280, height: 280 }\n  const margin = { top: 5, right: 5, bottom: 26, left: 26 }\n\n  let selectionPoint = { x: 0, y: 0 }\n\n  $: scaleX = $otddRange\n    ? d3scale.scaleLinear($otddRange, [\n        0,\n        plotSize.width - margin.left - margin.right,\n      ])\n    : null\n  $: scaleY = $errorDropRange\n    ? d3scale.scaleLinear($errorDropRange, [\n        plotSize.height - margin.top - margin.bottom,\n        0,\n      ])\n    : null\n  $: setTween($selectedTransform)\n\n  function setTween(transform) {\n    tweenedPoint.set(\n      $selectedTransform != null\n        ? {\n            x: +$selectedTransform['OTDD'],\n            y: +$selectedTransform['Error Drop'],\n          }\n        : { x: 0, y: 0 }\n    )\n  }\n\n  const tweenedPoint = tweened(selectionPoint, {\n    delay: 40,\n    duration: 1000,\n    easing: sineInOut,\n  })\n\n  function getPathForLine(line) {\n    let path = ''\n    line.forEach((p, i) => {\n      path += (i == 0 ? 'M' : ' L') + scaleX(+p.x) + ' ' + scaleY(+p.y)\n    })\n    return path\n  }\n\n  function getAreaFromLines(upper, lower) {\n    let path = ''\n    const points = upper.concat(lower.reverse()) //using slice to prevent changing the original values for the lines\n    points.forEach((p, i) => {\n      path += (i == 0 ? 'M' : ' L') + scaleX(+p.x) + ' ' + scaleY(+p.y)\n    })\n    path += ' Z'\n    return path\n  }\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .background {\n    fill: #f1f1f1;\n  }\n  .regression-line {\n    stroke: #333333;\n    stroke-width: 1;\n  }\n  .confidence-area {\n    stroke: none;\n    fill: #ffffff;\n  }\n  .confidence-line {\n    stroke: #111111;\n    stroke-dasharray: 5, 5;\n    fill: none;\n  }\n  .axis {\n    stroke: #666666;\n    stroke-width: 1;\n  }\n  .axisLabel {\n    font-size: 1em;\n    fill: #333333;\n    text-anchor: middle;\n  }\n  .dot {\n    fill: #111111;\n    cursor: pointer;\n  }\n  .selectedDot {\n    fill: #377eb8;\n    pointer-events: none;\n  }\n  .noTransformDot {\n    fill: #ff7f00;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n    <div class=\"panel-label\">Distance vs. performance</div>\n  </div>\n\n  <svg width={plotSize.width} height={plotSize.height}>\n    <rect class=\"background\" width={plotSize.width} height={plotSize.height} />\n    {#if $otddRange && $errorDropRange}\n      <g id=\"regression\" transform=\"translate({margin.left},{margin.top})\">\n        {#if $lowerConfidenceLine && $upperConfidenceLine}\n          <path\n            class=\"confidence-area\"\n            d={getAreaFromLines($lowerConfidenceLine, $upperConfidenceLine)} />\n          <path\n            class=\"confidence-line\"\n            d={getPathForLine($upperConfidenceLine)} />\n          <path\n            class=\"confidence-line\"\n            d={getPathForLine($lowerConfidenceLine)} />\n        {/if}\n        {#if $regressionLine}\n          <line\n            class=\"regression-line\"\n            x1={scaleX(+$regressionLine[0].x)}\n            y1={scaleY(+$regressionLine[0].y)}\n            x2={scaleX(+$regressionLine[1].x)}\n            y2={scaleY(+$regressionLine[1].y)} />\n        {/if}\n      </g>\n      <g id=\"axes\">\n        <line\n          class=\"axis\"\n          x1={margin.left}\n          y1={margin.top}\n          x2={margin.left}\n          y2={plotSize.height - margin.bottom} />\n        <line\n          class=\"axis\"\n          x1={margin.left}\n          y1={plotSize.height - margin.bottom}\n          x2={plotSize.width - margin.right}\n          y2={plotSize.height - margin.bottom} />\n        <text\n          class=\"axisLabel\"\n          transform=\"translate({(margin.left + (plotSize.width - margin.right)) / 2},{plotSize.height - margin.bottom + 19})\">\n          OTDD\n        </text>\n        <text\n          class=\"axisLabel\"\n          transform=\"translate({margin.left - 8},{(margin.top + (plotSize.height - margin.bottom)) / 2})\n          rotate(-90)\">\n          Accuracy improvement\n        </text>\n        {#if $transformations}\n          <g id=\"dots\" transform=\"translate({margin.left},{margin.top})\">\n            {#each $transformations as transform}\n              <circle\n                class=\"dot\"\n                r={transform.id === 'none' ? 6.5 : 4}\n                class:noTransformDot={transform.id == 'none'}\n                cx={scaleX(+transform['OTDD'])}\n                cy={scaleY(+transform['Error Drop'])}\n                on:click={() => {\n                  $selectedTransform = transform\n                }} />\n            {/each}\n          </g>\n        {/if}\n        {#if $selectedTransform != null && $selectedTransform.id != 'none'}\n          <g id=\"selectedDot\" transform=\"translate({margin.left},{margin.top})\">\n            <circle\n              class=\"selectedDot\"\n              r={7}\n              cx={scaleX($tweenedPoint.x)}\n              cy={scaleY($tweenedPoint.y)} />\n          </g>\n        {/if}\n      </g>\n    {/if}\n  </svg>\n</div>\n",
    "<script>\n  import {\n    dataForCurrentSelection,\n    coordinatesRange,\n    selectedCouplings,\n    dataDir,\n  } from './stores.js'\n\n  import * as d3scale from 'd3-scale'\n\n  const plotSize = { width: 280, height: 280 }\n  const margin = { top: 10, right: 10, bottom: 10, left: 10 }\n  const imageDir = dataDir + '/images'\n  const imageSize = 28 //width and height in pixels\n\n  $: scaleX = d3scale.scaleLinear($coordinatesRange.x, [\n    0,\n    plotSize.width - margin.left - margin.right,\n  ])\n  $: scaleY = d3scale.scaleLinear($coordinatesRange.y, [\n    0,\n    plotSize.height - margin.top - margin.bottom,\n  ])\n\n  //$: imageUrlPointA = $selectedCoupling ? imageDir + '/' + $dataForCurrentSelection.setA + '/' + $selectedCoupling.i + '.png' : '';\n  //$: imageUrlPointB = $selectedCoupling ? imageDir + '/' + $dataForCurrentSelection.setB + '/' + $selectedCoupling.j + '.png' : '';\n\n  function handleMouseOverA(p) {\n    //find corresponding coupling\n    $selectedCouplings = [\n      $dataForCurrentSelection.coupling.find(c => c.i == p.id),\n    ]\n  }\n\n  function handleMouseOverB(p) {\n    //find corresponding coupling\n    $selectedCouplings = [\n      $dataForCurrentSelection.coupling.find(c => c.j == p.id),\n    ]\n  }\n\n  function handleMouseOut() {\n    $selectedCouplings = []\n  }\n\n  function getImageUrlA(coupling) {\n    return (\n      imageDir + '/' + $dataForCurrentSelection.setA + '/' + coupling.i + '.png'\n    )\n  }\n\n  function getImageUrlB(coupling) {\n    return (\n      imageDir + '/' + $dataForCurrentSelection.setB + '/' + coupling.j + '.png'\n    )\n  }\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .background {\n    fill: #f1f1f1;\n  }\n  .point {\n    opacity: 0.4;\n  }\n  .point.set-a-point {\n    fill: #377eb8;\n  }\n  .point.set-b-point {\n    fill: #4daf4a;\n  }\n  .edge {\n    stroke: #333333;\n    opacity: 0.3;\n    stroke-width: 1;\n  }\n  .edge.selected {\n    stroke: #ff7f00;\n    opacity: 0.8;\n    stroke-width: 4;\n    pointer-events: none;\n  }\n  .image {\n    pointer-events: none;\n  }\n  .imageBorder {\n    stroke: #333333;\n    stroke-width: 1px;\n    fill: #ffffff;\n    pointer-events: none;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n    <div class=\"panel-label\">Samples and Optimal Coupling</div>\n  </div>\n  <svg width={plotSize.width} height={plotSize.height}>\n    <rect class=\"background\" width={plotSize.width} height={plotSize.height} />\n    {#if $dataForCurrentSelection}\n      <g id=\"edges\" transform=\"translate({margin.left}, {margin.top})\">\n        {#each $dataForCurrentSelection.coupling as c}\n          <line\n            class=\"edge\"\n            x1={scaleX(+$dataForCurrentSelection.coordsSetA[c.i].x)}\n            y1={scaleY(+$dataForCurrentSelection.coordsSetA[c.i].y)}\n            x2={scaleX(+$dataForCurrentSelection.coordsSetB[c.j].x)}\n            y2={scaleY(+$dataForCurrentSelection.coordsSetB[c.j].y)} />\n        {/each}\n      </g>\n\n      <g id=\"points-set-a\" transform=\"translate({margin.left}, {margin.top})\">\n        {#each $dataForCurrentSelection.coordsSetA as point}\n          <circle\n            class=\"point set-a-point\"\n            r={3}\n            cx={scaleX(+point.x)}\n            cy={scaleY(+point.y)}\n            on:mouseover={() => handleMouseOverA(point)}\n            on:mouseout={handleMouseOut} />\n        {/each}\n      </g>\n      <g id=\"points-set-b\" transform=\"translate({margin.left}, {margin.top})\">\n        {#each $dataForCurrentSelection.coordsSetB as point}\n          <circle\n            class=\"point set-b-point\"\n            r={3}\n            cx={scaleX(+point.x)}\n            cy={scaleY(+point.y)}\n            on:mouseover={() => handleMouseOverB(point)}\n            on:mouseout={handleMouseOut} />\n        {/each}\n      </g>\n    {/if}\n\n    <g id=\"points-set-b\" transform=\"translate({margin.left}, {margin.top})\">\n      {#each $selectedCouplings as c}\n        <line\n          class=\"edge selected\"\n          x1={scaleX(+$dataForCurrentSelection.coordsSetA[c.i].x)}\n          y1={scaleY(+$dataForCurrentSelection.coordsSetA[c.i].y)}\n          x2={scaleX(+$dataForCurrentSelection.coordsSetB[c.j].x)}\n          y2={scaleY(+$dataForCurrentSelection.coordsSetB[c.j].y)} />\n      {/each}\n      {#each $selectedCouplings.slice(0, 10) as c}\n        <rect\n          class=\"imageBorder\"\n          x={scaleX(+$dataForCurrentSelection.coordsSetA[c.i].x) - imageSize / 2}\n          y={scaleY(+$dataForCurrentSelection.coordsSetA[c.i].y) - imageSize / 2}\n          width={imageSize}\n          height={imageSize} />\n        <image\n          class=\"image\"\n          href={getImageUrlA(c)}\n          x={scaleX(+$dataForCurrentSelection.coordsSetA[c.i].x) - imageSize / 2}\n          y={scaleY(+$dataForCurrentSelection.coordsSetA[c.i].y) - imageSize / 2} />\n        <rect\n          class=\"imageBorder\"\n          x={scaleX(+$dataForCurrentSelection.coordsSetB[c.j].x) - imageSize / 2}\n          y={scaleY(+$dataForCurrentSelection.coordsSetB[c.j].y) - imageSize / 2}\n          width={imageSize}\n          height={imageSize} />\n        <image\n          class=\"image\"\n          href={getImageUrlB(c)}\n          x={scaleX(+$dataForCurrentSelection.coordsSetB[c.j].x) - imageSize / 2}\n          y={scaleY(+$dataForCurrentSelection.coordsSetB[c.j].y) - imageSize / 2} />\n      {/each}\n    </g>\n  </svg>\n</div>\n",
    "<script>\n  import {\n    dataForCurrentSelection,\n    selectedCouplings,\n    dataDir,\n    selectedLabelA,\n    selectedLabelB,\n  } from './stores.js'\n\n  import * as d3scale from 'd3-scale'\n\n  const plotSize = { width: 280, height: 280 }\n  const margin = { top: 45, right: 5, bottom: 5, left: 45 }\n  const imageDir = dataDir + '/images'\n  const imageSize = 28 //width and height in pixels\n\n  $: nrPointsSetA = $dataForCurrentSelection\n    ? $dataForCurrentSelection.coordsSetA.length\n    : 0\n  $: nrPointsSetB = $dataForCurrentSelection\n    ? $dataForCurrentSelection.coordsSetB.length\n    : 0\n\n  $: scaleX = d3scale.scaleLinear(\n    [0, nrPointsSetA],\n    [0, plotSize.width - margin.left - margin.right]\n  )\n  $: scaleY = d3scale.scaleLinear(\n    [0, nrPointsSetB],\n    [0, plotSize.height - margin.top - margin.bottom]\n  )\n\n  $: boxForSelectedCell = getBoxForCell($selectedLabelA, $selectedLabelB)\n\n  function getXForCoupling(c) {\n    const pointA = $dataForCurrentSelection.coordsSetA[c.i]\n    const index =\n      $dataForCurrentSelection.classesSetA[pointA.label].startIndex +\n      pointA.indexInClass\n    return scaleX(index)\n  }\n\n  function getYForCoupling(c) {\n    const pointB = $dataForCurrentSelection.coordsSetB[c.j]\n    const index =\n      $dataForCurrentSelection.classesSetB[pointB.label].startIndex +\n      pointB.indexInClass\n    return scaleY(index)\n  }\n\n  function getImageUrlA(coupling) {\n    return (\n      imageDir + '/' + $dataForCurrentSelection.setA + '/' + coupling.i + '.png'\n    )\n  }\n\n  function getImageUrlB(coupling) {\n    return (\n      imageDir + '/' + $dataForCurrentSelection.setB + '/' + coupling.j + '.png'\n    )\n  }\n\n  //label is '0', '1', etc.\n  //classA is '0 - zero', '1 - one', etc.\n  //classB is 'N0', 'N1', etc.\n  function getBoxForCell(labelA, labelB) {\n    if (labelA && labelB) {\n      const classNameA = Object.keys(\n        $dataForCurrentSelection.classesSetA\n      ).find(c => c.startsWith(labelA))\n      const classNameB = Object.keys(\n        $dataForCurrentSelection.classesSetB\n      ).find(c => c.endsWith(labelB))\n      const classA = $dataForCurrentSelection.classesSetA[classNameA]\n      const classB = $dataForCurrentSelection.classesSetB[classNameB]\n      return {\n        x: scaleX(classA.startIndex),\n        y: scaleY(classB.startIndex),\n        width: scaleX(classA.count),\n        height: scaleY(classB.count),\n      }\n    } else return undefined\n  }\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .background {\n    fill: #f1f1f1;\n  }\n  .dot {\n    fill: #333333; /*#9D00FE;*/\n    opacity: 0.3;\n  }\n  .dot.selected {\n    fill: #ff7f00;\n    opacity: 1;\n    /* r: 6; */\n    pointer-events: none;\n  }\n  .selectionSquare {\n    stroke: #ff7f00;\n    stroke-width: 4px;\n    fill: none;\n  }\n  .classLabel {\n    font-size: 0.8em;\n  }\n  .axis-label {\n    text-anchor: middle;\n    font-size: 0.9em;\n  }\n  .imageBorder {\n    stroke: #333333;\n    stroke-width: 1px;\n    fill: #ffffff;\n  }\n  text {\n    user-select: none;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n    <div class=\"panel-label\">Optimal coupling</div>\n  </div>\n  <svg width={plotSize.width} height={plotSize.height}>\n    <rect class=\"background\" width={plotSize.width} height={plotSize.height} />\n    {#if $dataForCurrentSelection}\n      <g id=\"dots\" transform=\"translate({margin.left}, {margin.top})\">\n        {#each $dataForCurrentSelection.coupling as c}\n          <circle\n            class=\"dot\"\n            r={3}\n            cx={getXForCoupling(c)}\n            cy={getYForCoupling(c)}\n            on:mouseover={() => ($selectedCouplings = [c])}\n            on:mouseout={() => ($selectedCouplings = [])} />\n        {/each}\n      </g>\n      <g id=\"labelsA\" transform=\"translate({margin.left},0)\">\n        {#each Object.entries($dataForCurrentSelection.classesSetA) as c}\n          <g\n            transform=\"translate({scaleX(c[1].startIndex + c[1].count / 2)},0)\">\n            <!-- don't show image when more then one coupling is selected -->\n            {#if $selectedCouplings.length != 1 || $dataForCurrentSelection.coordsSetA[$selectedCouplings[0].i].label != c[0]}\n              <text class=\"classLabel\" y={margin.top - 8} text-anchor=\"middle\">\n                {c[0].substr(0, 1)}\n              </text>\n            {/if}\n          </g>\n        {/each}\n      </g>\n      <g id=\"labelsB\" transform=\"translate(0, {margin.top})\">\n        {#each Object.entries($dataForCurrentSelection.classesSetB) as c}\n          <g\n            transform=\"translate(0, {scaleY(c[1].startIndex + c[1].count / 2)})\">\n            {#if $selectedCouplings.length != 1 || $dataForCurrentSelection.coordsSetB[$selectedCouplings[0].j].label != c[0]}\n              <text class=\"classLabel\" x={margin.left - 8} text-anchor=\"end\">\n                {c[0].substr(1, 1)}\n              </text>\n            {/if}\n          </g>\n        {/each}\n      </g>\n    {/if}\n    {#if boxForSelectedCell}\n      <g id=\"selectedDot\" transform=\"translate({margin.left}, {margin.top})\">\n        <rect\n          class=\"selectionSquare\"\n          x={boxForSelectedCell.x}\n          y={boxForSelectedCell.y}\n          width={boxForSelectedCell.width}\n          height={boxForSelectedCell.height} />\n      </g>\n    {/if}\n    {#each $selectedCouplings as c}\n      <g id=\"selectedDot\" transform=\"translate({margin.left}, {margin.top})\">\n        <circle\n          class=\"dot selected\"\n          r={6}\n          cx={getXForCoupling(c)}\n          cy={getYForCoupling(c)} />\n      </g>\n    {/each}\n    {#if $dataForCurrentSelection}\n      <g id=\"axis-label-top\" transform=\"translate({plotSize.width / 2}, 20)\">\n        <text class=\"axis-label\">{$dataForCurrentSelection.setA}</text>\n      </g>\n      <g id=\"axis-label-top\" transform=\"translate(20, {plotSize.height / 2})\">\n        <text class=\"axis-label\" transform=\"rotate(-90)\">\n          {$dataForCurrentSelection.setB}\n        </text>\n      </g>\n      <g id=\"imageA\" transform=\"translate({margin.left},0)\">\n        {#each Object.entries($dataForCurrentSelection.classesSetA) as c}\n          <g\n            transform=\"translate({scaleX(c[1].startIndex + c[1].count / 2)},0)\">\n            <!-- don't show image when more then one coupling is selected -->\n            {#if $selectedCouplings.length == 1 && $dataForCurrentSelection.coordsSetA[$selectedCouplings[0].i].label == c[0]}\n              <rect\n                class=\"imageBorder\"\n                x={-imageSize / 2}\n                y={margin.top - imageSize - 2}\n                width={imageSize}\n                height={imageSize} />\n              <image\n                href={getImageUrlA($selectedCouplings[0])}\n                x={-imageSize / 2}\n                y={margin.top - imageSize - 2} />\n            {/if}\n          </g>\n        {/each}\n      </g>\n      <g id=\"imageB\" transform=\"translate(0, {margin.top})\">\n        {#each Object.entries($dataForCurrentSelection.classesSetB) as c}\n          <g\n            transform=\"translate(0, {scaleY(c[1].startIndex + c[1].count / 2)})\">\n            {#if $selectedCouplings.length == 1 && $dataForCurrentSelection.coordsSetB[$selectedCouplings[0].j].label == c[0]}\n              <rect\n                class=\"imageBorder\"\n                x={margin.left - imageSize - 2}\n                y={-imageSize / 2}\n                width={imageSize}\n                height={imageSize} />\n              <image\n                href={getImageUrlB($selectedCouplings[0])}\n                x={margin.left - imageSize - 2}\n                y={-imageSize / 2} />\n            {/if}\n          </g>\n        {/each}\n      </g>\n    {/if}\n  </svg>\n</div>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { transformations, selectedTransform } from './stores.js';\n\n  const rotationRange = [0, 180];\n  const rotationStep = 30;\n\n  let rotation = rotationRange[0];\n  let selection = undefined;\n\n  $: initSelection($transformations);\n  //update menu when transform is selected in other component\n  $: updateMenu($selectedTransform);\n\n  function initSelection() {\n    if ($transformations) setSelection('none');\n  }\n\n  function setSelection(transformId) {\n    if (transformId == 'rot') {\n      selection = rotation == 0 ? 'none' : 'rot_' + rotation;\n    } else {\n      selection = selection == transformId ? 'none' : transformId;\n    }\n    $selectedTransform = $transformations.find(t => t.id == selection);\n  }\n\n  function updateMenu(transform) {\n    if (!transform || transform.id == 'none') {\n      selection = 'none';\n      rotation = 0;\n    } else if (transform.id.startsWith('rot_')) {\n      rotation = parseInt(transform.id.substring(4));\n      selection = 'rot_';\n    } else selection = transform.id;\n  }\n\n\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n  }\n  .menu {\n    background-color: #f1f1f1;\n    height: 280px;\n  }\n  .menu-items {\n    padding: 10px;\n  }\n  .menu-item {\n    margin: 10px 10px;\n  }\n  .menu-label {\n    font-size: 1em;\n    font-weight: bold;\n    margin-bottom: 5px;\n  }\n  .menu-option {\n    margin-left: 10px;\n  }\n  .menu-label.selected {\n    text-decoration: underline;\n  }\n  .dot {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    background-color: #666666;\n    border-radius: 6px;\n  }\n  .dot.selected {\n    background-color: #22bbff;\n  }\n  .dot.no-transform {\n    background-color: #ff6622;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n      <div class=\"panel-label\">Transform</div>\n  </div>\n  <div class=\"menu\">\n    <div class=\"menu-items\">\n\n      <div class=\"menu-item\">\n        <div class=\"menu-option\">\n          <label>\n            <input type=\"radio\"\n            checked=\"{selection == 'none'}\"\n            on:change=\"{() => setSelection('none')}\">\n            None\n          </label>\n        </div>\n      </div>\n\n      <div class=\"menu-item\">\n        <div class=\"menu-label\">Crop</div>\n        <div class=\"menu-option\">\n          <label>\n            <input type=\"radio\"\n            checked=\"{selection == 'center_crop'}\"\n            on:change=\"{() => setSelection('center_crop')}\">\n            center\n          </label>\n        </div>\n        <div class=\"menu-option\">\n          <label>\n            <input type=\"radio\"\n            checked=\"{selection == 'random_crop'}\"\n            on:change=\"{() => setSelection('random_crop')}\">\n            random\n          </label>\n        </div>\n      </div>\n\n      <div class=\"menu-item\">\n        <div class=\"menu-label\">Affine</div>\n        <div class=\"menu-option\">\n          <label>\n            <input type=\"radio\"\n              checked=\"{selection == 'random_aff'}\"\n              on:change=\"{() => setSelection('random_aff')}\">\n            random\n          </label>\n        </div>\n      </div>\n\n      <div class=\"menu-item\">\n        <div class=\"menu-label\">Rotate</div>\n        <div class=\"menu-option\">\n          <span>{ rotationRange[0] }</span>\n          <input type=\"range\"\n            bind:value=\"{rotation}\"\n            step=\"{rotationStep}\"\n            min=\"{rotationRange[0]}\"\n            max=\"{rotationRange[1]}\"\n            on:input=\"{() => setSelection('rot')}\">\n          <span>{ rotationRange[1] }</span>\n        </div>\n        <div class=\"menu-option\">\n          <label>\n            <input type=\"radio\"\n              checked=\"{selection == 'random_rot'}\"\n              on:change=\"{() => setSelection('random_rot')}\">\n            random [-180, 180]\n          </label>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n\n</div>\n",
    "<script>\n  export let set\n  export let rotation\n  export let mixing\n  export let label\n\n  import { onMount } from 'svelte'\n  import { tweened } from 'svelte/motion'\n  import { sineInOut } from 'svelte/easing'\n  import { rotationOptions, mixingOptions, coordinatesRange } from './stores.js'\n  import * as d3array from 'd3-array'\n  import * as d3scale from 'd3-scale'\n\n  const plotSize = { width: 280, height: 280 }\n  const padding = 10\n  const colorClass0 = '#377eb8' //\"#22bbff\";\n  const colorClass1 = '#4daf4a' //\"#ff6622\";\n  const pointRadius = 4\n\n  $: rotationValues = rotationOptions ? rotationOptions.map(d => d.value) : []\n  $: mixingValues = mixingOptions ? mixingOptions.map(d => d.value) : []\n\n  let backgroundCanvas\n  let pointsCanvas\n  let points //coords of points in class 0 and class 1: { '0': [{x: ,y: }, ..], '1': [{x: ,y: }, ..]}\n\n  onMount(() => {\n    drawBackground()\n  })\n\n  $: setTween(set) //set points in tween each time set changes\n\n  $: drawPoints($tweenedPoints) //draw points each time they change\n\n  // $: scaleX = d3scale.scaleLinear($coordinatesRange.x, [\n  //   padding,\n  //   plotSize.width - padding,\n  // ])\n  // $: scaleY = d3scale.scaleLinear($coordinatesRange.y, [\n  //   plotSize.height - padding,\n  //   padding,\n  // ])\n\n  function setTween(set) {\n    if (set) tweenedPoints.set({ '0': set.pointsClass0, '1': set.pointsClass1 })\n  }\n\n  const tweenedPoints = tweened(points, {\n    delay: 0,\n    duration: 300,\n    easing: sineInOut,\n  })\n\n  function drawBackground() {\n    const ctxBorder = backgroundCanvas.getContext('2d')\n    ctxBorder.fillStyle = '#f1f1f1'\n    ctxBorder.fillRect(0, 0, plotSize.width, plotSize.height)\n  }\n\n  function drawPoints(points) {\n    if (pointsCanvas) {\n      const scaleX = d3scale.scaleLinear($coordinatesRange.x, [\n        padding,\n        plotSize.width - padding,\n      ])\n      const scaleY = d3scale.scaleLinear($coordinatesRange.y, [\n        plotSize.height - padding,\n        padding,\n      ])\n      const ctx = pointsCanvas.getContext('2d')\n      ctx.clearRect(0, 0, plotSize.width, plotSize.height)\n\n      ctx.globalAlpha = 0.8\n\n      //draw points of class 0 as dots\n      points['0'].forEach(p => {\n        ctx.fillStyle = colorClass0\n        ctx.beginPath()\n        ctx.arc(scaleX(+p.x), scaleY(+p.y), pointRadius, 0, 2 * Math.PI)\n        ctx.fill()\n      })\n\n      points['1'].forEach(p => {\n        ctx.fillStyle = colorClass1\n        ctx.fillRect(\n          scaleX(+p.x),\n          scaleY(+p.y),\n          2 * pointRadius,\n          2 * pointRadius\n        )\n      })\n\n      ctx.globalAlpha = 1.0\n    }\n  }\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 500px;\n  }\n  .container {\n    position: absolute;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  canvas {\n    position: absolute;\n    left: 0px;\n    top: 0px;\n  }\n  .plot {\n    height: 280px;\n  }\n  .menu {\n    width: 280px;\n  }\n  .slider {\n    width: 260px;\n    margin-left: 10px;\n  }\n  .optionLabel {\n    display: inline-block;\n    font-size: 0.9em;\n    margin-left: 3px;\n    margin-right: 8px;\n  }\n  #border {\n    z-index: 0;\n  }\n  #points {\n    z-index: 1;\n  }\n  label {\n    margin-top: 10px;\n    margin-bottom: 5px;\n  }\n\n  .sliderticks {\n    margin-top: -5px;\n    width: 232px;\n    margin-left: 23px;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .sliderticks p {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    width: 1px;\n    background: #d3d3d3;\n    height: 10px;\n    line-height: 40px;\n    margin: 0 0 20px 0;\n    font-size: 0.8em;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n    <div class=\"panel-label\">{label}</div>\n  </div>\n\n  <div class=\"container\">\n    <div class=\"plot\">\n      <canvas\n        id=\"background\"\n        width={plotSize.width}\n        height={plotSize.height}\n        bind:this={backgroundCanvas} />\n\n      <canvas\n        id=\"points\"\n        width={plotSize.width}\n        height={plotSize.height}\n        bind:this={pointsCanvas} />\n    </div>\n    <div class=\"menu\">\n      <label>Rotation</label>\n      <input\n        class=\"slider\"\n        type=\"range\"\n        bind:value={rotation}\n        min={d3array.min(rotationValues)}\n        max={d3array.max(rotationValues)} />\n      <div class=\"sliderticks\">\n        {#each rotationOptions as option}\n          <p>{option.label}</p>\n        {/each}\n      </div>\n      <label>Mixing</label>\n      <input\n        class=\"slider\"\n        type=\"range\"\n        bind:value={mixing}\n        min={d3array.min(mixingValues)}\n        max={d3array.max(mixingValues)} />\n      <div class=\"sliderticks\">\n        {#each mixingOptions as option}\n          <p>{option.label}</p>\n        {/each}\n      </div>\n    </div>\n  </div>\n\n</div>\n",
    "<script>\n  import { selectedSetA, selectedSetB, dataForCurrentSelection, dataDir } from './stores.js';\n\n  const baseSet = \"MNIST\";\n  const targetSet = \"USPS\";\n  const transforms = [ {label: 'None', id: 'none'},\n                        {label: 'Crop', id: 'center_crop'},\n                        {label: 'Rotate', id: 'rot_90'} ];\n  const imageDir = dataDir + '/images';\n\n  let selectedTransform = transforms[0];\n\n  $selectedSetB = targetSet;\n\n  $: setSelectedSetA(selectedTransform);\n  $: pointPerClassA = $dataForCurrentSelection ? getOnePointPerClass($dataForCurrentSelection.coordsSetA) : [];\n  $: pointPerClassB = $dataForCurrentSelection ? getOnePointPerClass($dataForCurrentSelection.coordsSetB) : [];\n\n  function setSelectedSetA(transform) {\n    $selectedSetA = baseSet + '-' + transform.id;\n  }\n\n  function getOnePointPerClass(points) {\n    //get first point from each class\n    let pointPerClass = points.filter(p => p.indexInClass == 0);\n    pointPerClass.sort((p1, p2) => (p1.label < p2.label ? -1 : (p1.label > p2.label ? 1 : 0)));\n    return pointPerClass;\n  }\n\n  function getImageUrl(set, point) {\n    return imageDir + '/' + set + '/' + point.id + '.png';\n  }\n\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .menu {\n    background-color: #f1f1f1;\n    height: 280px;\n  }\n  .set-label {\n    display: inline-block;\n    font-size: 1.0em;\n    font-weight: bold;\n    margin-top: 10px;\n    margin-left: 5px;\n  }\n  .colordot {\n    display: inline-block;\n    width: 14px;\n    height: 14px;\n    border-radius: 7px;\n    margin-left: 3px;\n  }\n  .colordot.set-a {\n    background-color: #377eb8;\n  }\n  .colordot.set-b {\n    background-color: #4daf4a;\n  }\n  .menu-label {\n    font-weight: bold;\n    margin-bottom: 3px;\n    margin-left: 5px;\n    margin-top: 20px;\n  }\n  .menu-option {\n    display: inline-block;\n    margin-left: 10px;\n  }\n  .images {\n    margin: 10px 0px;\n    text-align: center;\n  }\n  .image {\n    width: 26px;\n    height: 26px;\n  }\n  .separator {\n    border-top: 2px solid #ffffff;\n    margin: 20px 10px;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n      <div class=\"panel-label\">Datasets</div>\n  </div>\n  <div class=\"menu\">\n    <div>\n      <div class=\"set-label\">{ baseSet }</div>\n      <div class=\"colordot set-a\"></div>\n    </div>\n    <div class=\"images\">\n      {#each pointPerClassA as p}\n        <img class=\"image\" src=\"{imageDir + '/' + $selectedSetA + '/' + p.id + '.png'}\" alt=\"\" />\n      {/each}\n    </div>\n    <div class=\"menu-label\">Transform</div>\n    <div class=\"menu-item\">\n      {#each transforms as transform}\n        <div class=\"menu-option\">\n          <label>\n            <input type='radio'\n              checked=\"{transform == selectedTransform}\"\n              on:input=\"{() => {selectedTransform = transform}}\">\n            { transform.label }\n          </label>\n        </div>\n      {/each}\n    </div>\n    <hr class=\"separator\"/>\n    <div>\n      <div class=\"set-label\">{ targetSet }</div>\n      <div class=\"colordot set-b\"></div>\n    </div>\n    <div class=\"images\">\n      {#each pointPerClassB as p}\n        <img class=\"image\" src=\"{imageDir + '/' + $selectedSetB + '/' + p.id + '.png'}\" alt=\"\" />\n      {/each}\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import * as d3scale from 'd3-scale';\n  import { selectedCoupling } from './stores.js';\n\n  const plotSize = { width: 280, height: 280 };\n  const margin = { top: 28, right: 24, bottom: 24, left: 28 };\n\n  //area where points are drawn\n  const pointsArea = { width: plotSize.width-margin.left-margin.right,\n                       height: plotSize.height-margin.top-margin.bottom };\n\n\n  //set ranges, i.e. size of blocks, depending on nr of points in each set\n  //for each class, in the currently selected coupling.\n  //number of points per set per class for OT is the same as that for OTDD\n  $: totalPointsInXDirection = $selectedCoupling ? $selectedCoupling.ot.set1PointsPerClass['0'].length+$selectedCoupling.ot.set1PointsPerClass['1'].length : 0;\n  $: totalPointsInYDirection = $selectedCoupling ? $selectedCoupling.ot.set2PointsPerClass['0'].length+$selectedCoupling.ot.set2PointsPerClass['1'].length : 0;\n\n  $: ranges = $selectedCoupling ?\n    {\n      'x': {\n        '0': [margin.left, margin.left + ($selectedCoupling.ot.set1PointsPerClass['0'].length/totalPointsInXDirection) * pointsArea.width],\n        '1': [margin.left + ($selectedCoupling.ot.set1PointsPerClass['0'].length/totalPointsInXDirection) * pointsArea.width, margin.left + pointsArea.width]\n      },\n      'y': {\n        '0': [margin.top, margin.top + ($selectedCoupling.ot.set2PointsPerClass['0'].length/totalPointsInYDirection) * pointsArea.height],\n        '1': [margin.top + ($selectedCoupling.ot.set2PointsPerClass['0'].length/totalPointsInYDirection) * pointsArea.height, margin.top + pointsArea.height]\n      }\n    } : undefined;\n\n  const colorOt = '#ff7f00';\n  const colorOtdd = '#984ea3';\n  const colorClass0 = \"#377eb8\";\n  const colorClass1 = \"#4daf4a\";\n  const colorLabels = \"#333333\";\n  const colorBackground = \"#dedede\";\n  const pointRadius = 2;\n\n  let borderCanvas;\n  let backgroundCanvas;\n  let labelsCanvas;\n  let pointsCanvas;\n\n  $: drawVisual($selectedCoupling);\n\n\n  function drawBackground() {\n    const ctx = backgroundCanvas.getContext('2d');\n    ctx.clearRect(0, 0, plotSize.width, plotSize.height);\n    ctx.fillStyle = \"#f1f1f1\";\n    ctx.fillRect(0, 0, plotSize.width, plotSize.height);\n    ctx.fillStyle = colorBackground;\n    //upper right square\n    ctx.fillRect(ranges.x[1][0], ranges.y[0][0], ranges.x[1][1]-ranges.x[1][0], ranges.y[0][1]-ranges.y[0][0]);\n    //lower left square\n    ctx.fillRect(ranges.x[0][0], ranges.y[1][0], ranges.x[0][1]-ranges.x[0][0], ranges.y[1][1]-ranges.y[1][0]);\n  }\n\n  function drawVisual(selectedCoupling) {\n    if (pointsCanvas) {\n      clear();\n      if ($selectedCoupling) {\n        drawBackground();\n        drawBarsAndLabels();\n        drawCouplings(selectedCoupling.ot, 'ot');\n        drawCouplings(selectedCoupling.otdd, 'otdd');\n      }\n    }\n  }\n\n  function clear() {\n    const ctx = pointsCanvas.getContext('2d');\n    ctx.clearRect(0, 0, plotSize.width, plotSize.height);\n  }\n\n  function drawCouplings(data, distanceMetric) {\n    const ctx = pointsCanvas.getContext('2d');\n    ctx.globalAlpha = 0.4;\n    ctx.fillStyle = distanceMetric == 'ot' ? colorOt : colorOtdd;\n    const scaleX = d3scale.scaleLinear([0, totalPointsInXDirection], [margin.left, margin.left+pointsArea.width]);\n    const scaleY = d3scale.scaleLinear([0, totalPointsInYDirection], [margin.top, margin.top+pointsArea.height]);\n    data.coupling.forEach(c => {\n      ctx.beginPath();\n      ctx.arc(scaleX(+c.i), scaleY(+c.j), pointRadius, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n  }\n\n  function drawBarsAndLabels() {\n    const lineWidth = 4;\n    const padding = 3; //space between pointsArea and bar, space between bar and label\n    const ctx = labelsCanvas.getContext('2d');\n    ctx.clearRect(0, 0, plotSize.width, plotSize.height);\n    //colored bars\n\n    //top '0'\n    ctx.fillStyle = colorClass0;\n    ctx.fillRect(ranges.x[0][0], margin.top-lineWidth-padding, ranges.x[0][1]-ranges.x[0][0], lineWidth);\n    //top '1'\n    ctx.fillStyle = colorClass1;\n    ctx.fillRect(ranges.x[1][0], margin.top-lineWidth-padding, ranges.x[1][1]-ranges.x[1][0], lineWidth);\n    //left '0'\n    ctx.fillStyle = colorClass0;\n    ctx.fillRect(margin.left-lineWidth-padding, ranges.y[0][0], lineWidth, ranges.y[0][1] - ranges.y[0][0]);\n    //left '1'\n    ctx.fillStyle = colorClass1;\n    ctx.fillRect(margin.left-lineWidth-padding, ranges.y[1][0], lineWidth, ranges.y[1][1] - ranges.y[1][0]);\n\n    //labels\n    ctx.fillStyle = colorLabels;\n    ctx.textAlign = 'center';\n    ctx.font = '15px Arial';\n    ctx.fillText('0', margin.left+pointsArea.width/4, margin.top-lineWidth-2*padding);\n    ctx.fillText('1', margin.left+0.75*pointsArea.width, margin.top-lineWidth-2*padding);\n    ctx.textAlign = 'end';\n    ctx.fillText('0', margin.left-lineWidth-2*padding, margin.top+pointsArea.height/4);\n    ctx.fillText('1', margin.left-lineWidth-2*padding, margin.left+0.75*pointsArea.height);\n  };\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .panel-legend {\n    display: inline-block;\n    margin-left: 10px;\n  }\n  .dot {\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    border-radius: 4px;\n    margin-left: 8px;\n    margin-right: 3px;\n  }\n  .dot.ot {\n    background-color: #ff7f00;\n  }\n  .dot.otdd {\n    background-color: #984ea3;\n  }\n  .legend-label {\n\n  }\n  .legend-label.ot {\n    color: #ff7f00;\n  }\n  .legend-label.otdd {\n    color: #984ea3;\n  }\n  .stack {\n    position: absolute;\n  }\n  canvas {\n    position:absolute;\n    left:0px;\n    top:0px;\n  }\n  #background {\n    z-index: 0;\n  }\n  #labels {\n    z-index: 1;\n  }\n  #border {\n    z-index: 2;\n  }\n  #points {\n    z-index: 3;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n      <div class=\"panel-label\">Coupling</div>\n      <div class=\"panel-legend\">\n        <span class=\"dot ot\" /><span class=\"legend-label ot\">OT</span>\n        <span class=\"dot otdd\" /><span class=\"legend-label otdd\">OTDD</span>\n      </div>\n  </div>\n  <div class=\"stack\">\n    <canvas id=\"background\" width={plotSize.width} height={plotSize.height} bind:this={backgroundCanvas}></canvas>\n    <canvas id=\"border\" width={plotSize.width} height={plotSize.height} bind:this={borderCanvas}></canvas>\n    <canvas id=\"labels\" width={plotSize.width} height={plotSize.height} bind:this={labelsCanvas}></canvas>\n    <canvas id=\"points\" width={plotSize.width} height={plotSize.height} bind:this={pointsCanvas}></canvas>\n  </div>\n\n</div>\n",
    "<script>\n  import { onMount } from 'svelte'\n  import * as d3scale from 'd3-scale'\n  import * as d3sc from 'd3-scale-chromatic'\n  import {\n    selectedSet1,\n    dataForCurrentSelection,\n    coordinatesRange,\n    distances,\n    useColor,\n    selectedCouplings,\n    loadingData,\n  } from './stores.js'\n\n  const plotSize = { width: 280, height: 280 } //size of square, excluding area for arcs\n  const padding = 5\n  const dotRadius = 2\n  const highlightColor = '#ff7f00'\n\n  let borderCanvas\n  let edgesCanvas\n  let pointsCanvas\n  let selectionCanvas //highlighted edges and points\n\n  let showProjections = false\n\n  $: drawPoints(\n    $dataForCurrentSelection,\n    $coordinatesRange,\n    $useColor,\n    showProjections\n  ) //re-draw each time data changes\n  $: drawEdges(\n    $dataForCurrentSelection,\n    $coordinatesRange,\n    $useColor,\n    showProjections\n  )\n  $: drawSelection(\n    $dataForCurrentSelection,\n    $coordinatesRange,\n    $useColor,\n    showProjections,\n    $selectedCouplings\n  )\n\n  onMount(() => {\n    drawBackground()\n  })\n\n  function drawBackground() {\n    const ctxBorder = borderCanvas.getContext('2d')\n    ctxBorder.fillStyle = '#f1f1f1'\n    ctxBorder.fillRect(0, 0, plotSize.width, plotSize.height)\n  }\n\n  function drawPoints(data) {\n    if (pointsCanvas && data) {\n      const scaleX = d3scale.scaleLinear($coordinatesRange.x, [\n        padding,\n        plotSize.width - padding,\n      ])\n      const scaleY = d3scale.scaleLinear($coordinatesRange.y, [\n        padding,\n        plotSize.height - padding,\n      ])\n      const ctx = pointsCanvas.getContext('2d')\n      ctx.clearRect(0, 0, plotSize.width, plotSize.height)\n\n      const setAisSet1 = data.setA == $selectedSet1\n      const defaultColorSet1 = '#377eb8'\n      const defaultColorSet2 = '#4daf4a'\n      const alternateColorSet2 = '#333333' //use this for set 2 if set1 is colored according to its classes\n\n      const set1Points = setAisSet1 ? data.coordsSetA : data.coordsSetB\n      const set1Classes = set1Points\n        .map(p => p.label)\n        .filter((v, i, a) => a.indexOf(v) === i)\n      const getColorForClass = d3scale\n        .scaleOrdinal(d3sc.schemeCategory10)\n        .domain(set1Classes)\n\n      ctx.globalAlpha = 0.2\n      //draw points for setA\n      $dataForCurrentSelection.coordsSetA.forEach(p => {\n        ctx.fillStyle = setAisSet1\n          ? $useColor\n            ? getColorForClass(p.label)\n            : defaultColorSet1\n          : $useColor\n          ? alternateColorSet2\n          : defaultColorSet2\n        ctx.beginPath()\n        ctx.arc(scaleX(+p.x), scaleY(+p.y), dotRadius, 0, 2 * Math.PI)\n        ctx.fill()\n      })\n      $dataForCurrentSelection.coordsSetB.forEach(p => {\n        ctx.fillStyle = setAisSet1\n          ? $useColor\n            ? alternateColorSet2\n            : defaultColorSet2\n          : $useColor\n          ? getColorForClass(p.label)\n          : defaultColorSet1\n        ctx.beginPath()\n        ctx.arc(scaleX(+p.x), scaleY(+p.y), dotRadius, 0, 2 * Math.PI)\n        ctx.fill()\n      })\n    }\n  }\n\n  function drawEdges(data) {\n    if (edgesCanvas && data) {\n      const scaleX = d3scale.scaleLinear($coordinatesRange.x, [\n        0,\n        plotSize.width,\n      ])\n      const scaleY = d3scale.scaleLinear($coordinatesRange.y, [\n        0,\n        plotSize.height,\n      ])\n      const ctx = edgesCanvas.getContext('2d')\n      ctx.clearRect(0, 0, 1.5 * plotSize.width, 1.5 * plotSize.height)\n\n      const setAisSet1 = data.setA == $selectedSet1\n      const set1Points = setAisSet1 ? data.coordsSetA : data.coordsSetB\n      const set1Classes = set1Points\n        .map(p => p.label)\n        .filter((v, i, a) => a.indexOf(v) === i)\n      const getColorForClass = d3scale\n        .scaleOrdinal(d3sc.schemeCategory10)\n        .domain(set1Classes)\n\n      $dataForCurrentSelection.coupling.forEach(c => {\n        const pA = data.coordsSetA[+c.i]\n        const pB = data.coordsSetB[+c.j]\n\n        ctx.strokeStyle = $useColor\n          ? setAisSet1\n            ? getColorForClass(pA.label)\n            : getColorForClass(pB.label)\n          : '#000000'\n        //draw line between p1 and p2\n        ctx.globalAlpha = 0.1\n        ctx.beginPath()\n        ctx.moveTo(scaleX(+pA.x), scaleY(+pA.y))\n        ctx.lineTo(scaleX(+pB.x), scaleY(+pB.y))\n        ctx.stroke()\n\n        if (showProjections) {\n          //draw curve: x projection below square\n          ctx.globalAlpha = 0.05\n          ctx.beginPath()\n          ctx.arc(\n            (scaleX(+pA.x) + scaleX(pB.x)) / 2,\n            plotSize.height,\n            Math.abs(scaleX(+pA.x) - scaleX(pB.x)) / 2,\n            0,\n            Math.PI\n          )\n          ctx.stroke()\n          //draw curve: y projection next of square\n          ctx.beginPath()\n          ctx.arc(\n            plotSize.width,\n            (scaleX(+pA.y) + scaleX(pB.y)) / 2,\n            Math.abs(scaleX(+pA.y) - scaleX(pB.y)) / 2,\n            1.5 * Math.PI,\n            0.5 * Math.PI\n          )\n          ctx.stroke()\n        }\n      })\n      ctx.globalAlpha = 1\n    }\n  }\n\n  function drawSelection(data) {\n    if (selectionCanvas && data) {\n      const scaleX = d3scale.scaleLinear($coordinatesRange.x, [\n        0,\n        plotSize.width,\n      ])\n      const scaleY = d3scale.scaleLinear($coordinatesRange.y, [\n        0,\n        plotSize.height,\n      ])\n      const ctx = selectionCanvas.getContext('2d')\n      ctx.clearRect(0, 0, 1.5 * plotSize.width, 1.5 * plotSize.height)\n      //draw selected coupling, if any\n      ctx.globalAlpha = $selectedCouplings.length > 1 ? 0.5 : 1 //more transparency when drawing multiple lines\n      $selectedCouplings.forEach(c => {\n        const pA = data.coordsSetA[+c.i]\n        const pB = data.coordsSetB[+c.j]\n        ctx.strokeStyle = highlightColor\n        ctx.lineWidth = 3\n        ctx.beginPath()\n        ctx.moveTo(scaleX(+pA.x), scaleY(+pA.y))\n        ctx.lineTo(scaleX(+pB.x), scaleY(+pB.y))\n        ctx.stroke()\n\n        if (showProjections) {\n          //draw curve: x projection below square\n          ctx.beginPath()\n          ctx.arc(\n            (scaleX(+pA.x) + scaleX(pB.x)) / 2,\n            plotSize.height,\n            Math.abs(scaleX(+pA.x) - scaleX(pB.x)) / 2,\n            0,\n            Math.PI\n          )\n          ctx.stroke()\n          //draw curve: y projection next of square\n          ctx.beginPath()\n          ctx.arc(\n            plotSize.width,\n            (scaleX(+pA.y) + scaleX(pB.y)) / 2,\n            Math.abs(scaleX(+pA.y) - scaleX(pB.y)) / 2,\n            1.5 * Math.PI,\n            0.5 * Math.PI\n          )\n          ctx.stroke()\n        }\n        ctx.lineWidth = 1\n      })\n    }\n  }\n</script>\n\n<style>\n  .visual {\n    width: 320px;\n    height: 400px;\n  }\n  @keyframes spinner {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n  .loading-spinner {\n    position: relative;\n    height: 24px;\n    margin-left: 20px;\n  }\n  .spinner:before {\n    content: '';\n    box-sizing: border-box;\n    position: absolute;\n    top: 50%;\n\n    width: 12px;\n    height: 12px;\n    margin-top: -6px;\n    margin-left: -6px;\n    border-radius: 50%;\n    border-top: 2px solid #333;\n    border-right: 2px solid transparent;\n    animation: spinner 0.6s linear infinite;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .checkbox {\n    display: inline-block;\n    /*float: right;*/\n    margin-left: 20px;\n  }\n  .stack {\n    position: absolute;\n  }\n  canvas {\n    position: absolute;\n    left: 0px;\n    top: 0px;\n  }\n  #border {\n    z-index: 0;\n  }\n  #edges {\n    z-index: 1;\n  }\n  #points {\n    z-index: 2;\n  }\n  #highlights {\n    z-index: 3;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n    {#if $dataForCurrentSelection && !$loadingData}\n      <div class=\"panel-label\">Coupling</div>\n      <div class=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" bind:checked={showProjections} />\n          Show projections\n        </label>\n      </div>\n    {:else}\n      <div class=\"loading-spinner spinner\" />\n    {/if}\n  </div>\n  <div class=\"stack\">\n    <canvas\n      id=\"border\"\n      width={plotSize.width}\n      height={plotSize.height}\n      bind:this={borderCanvas} />\n    <canvas\n      id=\"edges\"\n      width={1.5 * plotSize.width}\n      height={1.5 * plotSize.height}\n      bind:this={edgesCanvas} />\n    <canvas\n      id=\"points\"\n      width={plotSize.width}\n      height={plotSize.height}\n      bind:this={pointsCanvas} />\n    <canvas\n      id=\"highlights\"\n      width={1.5 * plotSize.width}\n      height={1.5 * plotSize.height}\n      bind:this={selectionCanvas} />\n  </div>\n</div>\n",
    "<script>\n  import * as d3scale from 'd3-scale';\n  import * as d3sc from 'd3-scale-chromatic';\n  import { dataDir,\n           selectedSet1,\n           dataForCurrentSelection,\n           coordinatesRange,\n           useColor,\n           selectedCouplings,\n           loadingData } from './stores.js';\n\n  export let set;\n\n  const plotSize = {width: 280, height: 280};\n  const padding = 5;\n  const imageDir = dataDir + '/images';\n  const imageSize = 28;\n\n  //mappings from points in feature space to screen coordinates\n  $: scaleX = d3scale.scaleLinear($coordinatesRange.x, [padding,plotSize.width-padding]);\n  $: scaleY = d3scale.scaleLinear($coordinatesRange.y, [padding,plotSize.height-padding]);\n  $: points = $dataForCurrentSelection\n    ? (set == $dataForCurrentSelection.setA ? $dataForCurrentSelection.coordsSetA : $dataForCurrentSelection.coordsSetB)\n    : [];\n  //classes present in the points of this set\n  $: classes = points.map(p => p.label).filter((v, i, a) => a.indexOf(v) === i);\n  $: getColorForClass = d3scale.scaleOrdinal(d3sc.schemeCategory10).domain(classes);\n  $: isSet1 = set == $selectedSet1; //is this the left (set1) or right (set2) panel?\n  $: isSetA = $dataForCurrentSelection ? (set == $dataForCurrentSelection.setA) : false;\n\n\n  function handleMouseOver(point) {\n    //get the corresponding connections from this point to another\n    const idColumn = isSetA ? 'i' : 'j';\n    $selectedCouplings = [$dataForCurrentSelection.coupling.find(c => c[idColumn] == point.id)];\n  }\n  function handleMouseOut() {\n    $selectedCouplings = [];\n  }\n\n  function getImageUrl (pointId) {\n    return imageDir + '/' + set + '/' + pointId + '.png'\n  }\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  @keyframes spinner {\n    to {transform: rotate(360deg);}\n  }\n  .loading-spinner {\n    position: relative;\n    height: 24px;\n    margin-left: 20px;\n  }\n  .spinner:before {\n    content: '';\n    box-sizing: border-box;\n    position: absolute;\n    top: 50%;\n\n    width: 12px;\n    height: 12px;\n    margin-top: -6px;\n    margin-left: -6px;\n    border-radius: 50%;\n    border-top: 2px solid #333;\n    border-right: 2px solid transparent;\n    animation: spinner .6s linear infinite;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .checkbox {\n    display: inline-block;\n    margin-left: 20px;\n  }\n  .background {\n    fill: #f1f1f1;\n  }\n  .point {\n    r: 2;\n    opacity: 0.2;\n  }\n  .image {\n    pointer-events: none;\n  }\n  .imageBorder {\n    stroke: #333333;\n    stroke-width: 1px;\n    fill: #ffffff;\n    pointer-events: none;\n  }\n</style>\n\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n    {#if set}\n      {#if $loadingData}\n        <div class=\"loading-spinner spinner\"></div>\n      {:else}\n        <div class=\"panel-label\"> {set} </div>\n        {#if isSet1}\n        <div class=\"checkbox\">\n          <label><input type=checkbox bind:checked={$useColor}> Color classes</label>\n        </div>\n        {/if}\n      {/if}\n    {/if}\n  </div>\n  <svg width={plotSize.width} height={plotSize.height}>\n    <rect class=\"background\"\n      width={plotSize.width}\n      height={plotSize.height}>\n    </rect>\n\n    <g id=\"points\">\n      {#each points as point}\n      <circle\n        r=\"2\"\n        opacity=\"0.2\"\n        cx={scaleX(+point.x)}\n        cy={scaleY(+point.y)}\n        on:mouseover=\"{e => handleMouseOver(point)}\"\n        on:mouseout={handleMouseOut}\n        fill=\"{ isSet1 ? ($useColor ? getColorForClass(point.label) : '#377eb8') : ($useColor ? '#333333' : '#4daf4a') }\">\n      </circle>\n      {/each}\n    </g>\n\n    {#each $selectedCouplings.slice(0,10) as c}\n      <rect class=\"imageBorder\"\n        x=\"{scaleX(isSetA ? points[c.i].x : points[c.j].x)}\"\n        y=\"{scaleY(isSetA ? points[c.i].y : points[c.j].y)}\"\n        width=\"{imageSize}\"\n        height=\"{imageSize}\">\n      </rect>\n      <image class=\"image\"\n        href=\"{ getImageUrl(isSetA ? c.i : c.j)}\"\n        x=\"{scaleX(isSetA ? points[c.i].x : points[c.j].x)}\"\n        y=\"{scaleY(isSetA ? points[c.i].y : points[c.j].y)}\">\n      </image>\n    {/each}\n  </svg>\n</div>\n",
    "<script>\n  import { tweened } from 'svelte/motion';\n  import { sineInOut } from 'svelte/easing';\n  import { normalizedDistance } from './stores.js';\n  import * as d3scale from 'd3-scale';\n\n  const plotSize = {width: 280, height: 280};\n  const barWidth = 60;\n  const margin = { top: 30, right: 60, bottom: 60, left: 60 };\n  const baseLineExtensionLength = 10; //how much does the baseline stick out at both sides of bar\n\n  let distances;\n\n  //domain is [0,1] because distances are normalized\n  $: scaleHeight = d3scale.scaleLinear([0,1], [0, (plotSize.height - margin.top - margin.bottom)]);\n  $: setTween($normalizedDistance);\n\n  function setTween(dist) {\n    tweenedDistances.set(dist);\n  }\n\n  const tweenedDistances = tweened(distances, {\n    delay: 40,\n    duration: 300,\n    easing: sineInOut\n  })\n\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .background {\n    fill: #f1f1f1;\n  }\n  .bar {\n    stroke: none;\n  }\n  .bar.otBar {\n    fill: #ff7f00;\n  }\n  .bar.otddBar {\n    fill: #984ea3;\n  }\n  .baseLine {\n    stroke: #000000;\n    stroke-width: 1;\n  }\n  .barLabel {\n    text-anchor: middle;\n    font-size: 1.1em;\n    fill: #333333;\n  }\n  .barSubLabel {\n    text-anchor: middle;\n    font-size: 0.9em;\n    font-style: italic;\n    fill: #333333;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n      <div class=\"panel-label\">Distance between set 1 and set 2</div>\n  </div>\n  <svg width={plotSize.width} height={plotSize.height}>\n    <rect class=\"background\"\n      width={plotSize.width}\n      height={plotSize.height}>\n    </rect>\n    <!-- bar and label for ot distance -->\n    <g transform=\"translate({ margin.left}, { plotSize.height-margin.bottom })\">\n      <rect class=\"bar otBar\"\n        y=\"{ -scaleHeight($tweenedDistances.ot) }\"\n        height=\"{ scaleHeight($tweenedDistances.ot) }\"\n        width=\"{ barWidth }\">\n      </rect>\n      <text class=\"barLabel\"\n        x=\"{barWidth/2}\"\n        y=\"20\">\n        OT\n      </text>\n      <text class=\"barSubLabel\"\n        x=\"{barWidth/2}\"\n        y=\"40\">\n        features only\n      </text>\n      <!-- baseline -->\n      <line class=\"baseLine\"\n        x1=\"{-baseLineExtensionLength}\"\n        y1=\"0\"\n        x2=\"{ barWidth + baseLineExtensionLength}\"\n        y2=\"0\">\n      </line>\n    </g>\n    <!-- bar and label for otdd distance -->\n    <g transform=\"translate({ plotSize.width - margin.right - barWidth }, { plotSize.height-margin.bottom })\">\n      <rect class=\"bar otddBar\"\n        y=\"{ -scaleHeight($tweenedDistances.otdd) }\"\n        height=\"{ scaleHeight($tweenedDistances.otdd) }\"\n        width=\"{ barWidth }\">\n      </rect>\n      <text class=\"barLabel\"\n        x=\"{barWidth/2}\"\n        y=\"20\">\n        OTDD\n      </text>\n      <text class=\"barSubLabel\"\n        x=\"{barWidth/2}\"\n        y=\"40\">\n        with labels\n      </text>\n      <!-- baseline -->\n      <line class=\"baseLine\"\n        x1=\"{-baseLineExtensionLength}\"\n        y1=\"0\"\n        x2=\"{ barWidth + baseLineExtensionLength}\"\n        y2=\"0\">\n      </line>\n    </g>\n\n\n  </svg>\n</div>\n",
    "<script>\n  import * as d3scale from 'd3-scale'\n  import * as d3array from 'd3-array'\n  import * as d3sc from 'd3-scale-chromatic'\n\n  import { distances, selectedSet1, selectedSet2, dataSetIds } from './stores.js';\n\n  const plotSize = { width: 280, height: 280 };\n  const margin = { top: 110, right: 5, bottom: 5, left: 110 };\n\n  //color mapping for distance matrix\n  $: getColorForDistance = d3scale.scaleSequential(d3sc.interpolateBlues).domain([0, d3array.max($distances, (d) => d.dist)]);\n\n  $: cellSize = $dataSetIds.length > 0 ?\n    { width: (plotSize.width-margin.left-margin.right) / $dataSetIds.length,\n      height: (plotSize.height-margin.top-margin.bottom) / $dataSetIds.length }\n    : { width: 0, height: 0 };\n\n  $: initSelection($dataSetIds);\n\n  function initSelection(dataSetIds) {\n    if (!$selectedSet1 && !$selectedSet2 && dataSetIds.length > 1) {\n      $selectedSet1 = $dataSetIds[0];\n      $selectedSet2 = $dataSetIds[1];\n    }\n  }\n\n  function getDistanceBetweenSets(set1, set2) {\n    return $distances.find(d => ((d.da == set1 && d.db == set2) || (d.da == set2 && d.db == set1))).dist;\n  }\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .background {\n    fill: #f1f1f1;\n  }\n  .cell {\n    stroke: #ffffff;\n    stroke-width: 1;\n    cursor: pointer;\n  }\n  .cell:hover {\n    fill: #ff7f00;\n  }\n  .cell.selected {\n    fill: #ff7f00;\n  }\n  .distanceLabel {\n    fill: #ffffff;\n    font-size: 0.7em;\n    text-anchor: middle;\n    pointer-events: none;\n  }\n  .setLabel {\n    font-size: 0.9em;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n    <div class=\"panel-label\">Distances</div>\n  </div>\n  <svg width={plotSize.width} height={plotSize.height}>\n    <rect class=\"background\"\n      width={plotSize.width}\n      height={plotSize.height}>\n    </rect>\n    <g id=\"distanceMatrix\"\n      transform=\"translate({margin.left},{margin.top})\">\n      <!-- cells -->\n      {#each $dataSetIds as set1, i}\n        {#each $dataSetIds as set2, j}\n          {#if set1 != set2}\n            <g transform=\"translate({i * cellSize.width},{j * cellSize.height})\">\n              <rect class=\"{set1 == $selectedSet1 && set2==$selectedSet2 ? 'cell selected' : 'cell'}\"\n                width={cellSize.width}\n                height={cellSize.height}\n                fill={ getColorForDistance(getDistanceBetweenSets(set1, set2)) }\n                on:click=\"{() => {$selectedSet1 = set1; $selectedSet2 = set2; }}\">\n              </rect>\n              <text class=\"distanceLabel\"\n                x=\"{cellSize.width/2}\"\n                y=\"{cellSize.height/2 + 5}\">\n                { Math.round(getDistanceBetweenSets(set1, set2)) }\n              </text>\n            </g>\n          {/if}\n        {/each}\n      {/each}\n      <!-- labels along top side of matrix -->\n      {#each $dataSetIds as set, i}\n        <text class=\"setLabel\"\n          transform=\"translate({(i + 0.5) * cellSize.width + 5}, -10) rotate(-90)\">\n            { set }\n        </text>\n      {/each}\n      <!-- labels along left side of matrix -->\n      {#each $dataSetIds as set, i}\n        <text class=\"setLabel\"\n          transform=\"translate(-10, {(i + 0.5) * cellSize.height + 5})\"\n          text-anchor=\"end\">\n            { set }\n        </text>\n      {/each}\n    </g>\n\n  </svg>\n</div>\n",
    "<script>\n  import { dataForCurrentSelection,\n           selectedCouplings,\n           selectedLabelA,\n           selectedLabelB } from './stores.js';\n  import * as d3scale from 'd3-scale'\n  import * as d3array from 'd3-array'\n  import * as d3sc from 'd3-scale-chromatic'\n\n  const plotSize = {width: 280, height: 280};\n  const margin = { top: 45, right: 5, bottom: 5, left: 45 };\n\n  $: labelsA = $dataForCurrentSelection ? $dataForCurrentSelection.labelDistance.map(d => d.label_src).filter((v, i, a) => a.indexOf(v) === i).sort() : [];\n  $: labelsB = $dataForCurrentSelection ? $dataForCurrentSelection.labelDistance.map(d => d.label_tgt).filter((v, i, a) => a.indexOf(v) === i).sort() : [];\n  $: cellSize = (labelsA.length > 0 && labelsB.length) > 0 ?\n    { width: (plotSize.width-margin.left-margin.right)/labelsA.length, height: (plotSize.height-margin.top-margin.bottom)/labelsB.length }\n    : { width: 0, height: 0 }\n\n  $: getColorForDistance = $dataForCurrentSelection ?\n    d3scale.scaleSequential(d3sc.interpolateBlues).domain(d3array.extent($dataForCurrentSelection.labelDistance, (d) => d.dist))\n    : undefined;\n\n\n  function getDistanceBetweenLabels(l1, l2) {\n    return +$dataForCurrentSelection.labelDistance\n      .find(d => ((d.label_src == l1 && d.label_tgt == l2)\n               || (d.label_src == l2 && d.label_tgt == l1))).dist;\n  }\n\n  function handleMouseOver(labelA, labelB) {\n    $selectedCouplings = $dataForCurrentSelection.coupling.filter(c => ((c.ci.substr(0,1) == labelA) && (c.cj == labelB))); //ci = '1 - one', lA = '1'\n    $selectedLabelA = labelA\n    $selectedLabelB = labelB\n  }\n\n  function handleMouseOut() {\n    $selectedCouplings = [];\n    $selectedLabelA = undefined\n    $selectedLabelB = undefined\n  }\n\n</script>\n\n<style>\n  .visual {\n    width: 280px;\n    height: 320px;\n  }\n  .panel-header {\n    height: 24px;\n  }\n  .panel-label {\n    font-size: 1.0em;\n    font-weight: bold;\n    display: inline-block;\n  }\n  .background {\n    fill: #f1f1f1;\n  }\n  .label {\n    font-size: 0.8em;\n  }\n  .distanceLabel {\n    text-anchor: middle;\n    fill: #ffffff;\n    font-size: 0.9em;\n    user-select: none;\n    pointer-events: none;\n  }\n  .axis-label {\n    text-anchor: middle;\n    font-size: 0.9em;\n  }\n  .cell:hover {\n    fill: #ff7f00;\n  }\n</style>\n\n<div class=\"visual\">\n  <div class=\"panel-header\">\n      <div class=\"panel-label\">Label distance</div>\n  </div>\n  <svg width=\"{plotSize.width}\" height=\"{plotSize.height}\">\n    <rect class=\"background\"\n      width={plotSize.width}\n      height={plotSize.height}>\n    </rect>\n    <g id=\"cells\" transform=\"translate({margin.left}, {margin.top})\">\n      {#each labelsA as labelA, i}\n        {#each labelsB as labelB, j}\n          <g transform=\"translate({i * cellSize.width},{j * cellSize.height})\">\n            <rect class=\"cell\"\n              width={cellSize.width}\n              height={cellSize.height}\n              fill=\"{ labelA == labelB ? '#f1f1f1' : getColorForDistance(getDistanceBetweenLabels(labelA, labelB)) }\"\n              on:mouseover=\"{() => handleMouseOver(labelA, labelB)}\"\n              on:mouseout=\"{handleMouseOut}\">\n            </rect>\n            <text class=\"distanceLabel\"\n              x=\"{cellSize.width/2}\"\n              y=\"{cellSize.height/2 + 5}\">\n              { Math.round(getDistanceBetweenLabels(labelA, labelB)) }\n            </text>\n          </g>\n        {/each}\n      {/each}\n      <g id=\"labelsTop\">\n        {#each labelsA as labelA, i}\n          <text class=\"label\"\n            x={ (i + 0.5) * cellSize.width}\n            y=-5\n            text-anchor=\"middle\">\n              { labelA }\n          </text>\n        {/each}\n      </g>\n      <g id=\"labelsLeft\">\n        {#each labelsB as labelB, i}\n          <text class=\"label\"\n            x=-5\n            y={(i + 0.5) * cellSize.height +5 }\n            text-anchor=\"end\">\n              { labelB }\n          </text>\n        {/each}\n      </g>\n    </g>\n    {#if $dataForCurrentSelection}\n      <g id=\"axis-label-top\" transform=\"translate({plotSize.width/2}, 20)\">\n        <text class=\"axis-label\">\n          { $dataForCurrentSelection.setA }\n        </text>\n      </g>\n      <g id=\"axis-label-top\" transform=\"translate(20, {plotSize.height/2})\">\n        <text class=\"axis-label\" transform=\"rotate(-90)\">\n          { $dataForCurrentSelection.setB }\n        </text>\n      </g>\n    {/if}\n  </svg>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}